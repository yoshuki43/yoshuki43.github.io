<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yoshuki43's blog]]></title>
  <link href="http://yoshuki43.github.io/atom.xml" rel="self"/>
  <link href="http://yoshuki43.github.io/"/>
  <updated>2018-03-17T13:12:16+09:00</updated>
  <id>http://yoshuki43.github.io/</id>
  <author>
    <name><![CDATA[yoshuki43]]></name>
    <email><![CDATA[yoshuki43@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ローカルにKotoのTestnetを作成してみる]]></title>
    <link href="http://yoshuki43.github.io/blog/2018/03/17/create-koto-testnet-locally/"/>
    <updated>2018-03-17T11:08:30+09:00</updated>
    <id>http://yoshuki43.github.io/blog/2018/03/17/create-koto-testnet-locally</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>2018年3月現在、KotoにはTestnetが存在しません。
KotoのソースにはTestnet用のdnsseedとして「dnsseed.testnet.koto.cash」が設定されていますが、DNS問い合わせしても値が返ってきません。</p>

<p>ということで、プライベートなTestnetを立てる方法を探ってみました。</p>

<p>ポイントは二つ：</p>

<ul>
<li>Genesis Block(最初のブロック)に定義されている日時からある程度時間が経つとマイニングできなく(ブロックダウンロード待ちに)なってしまうので、それをどうにかする。</li>
<li>最低2個のkotodがネットワークに参加していないとマイニングできない。</li>
</ul>


<p><strong>(自分で建てるのがめんどくさい人向け)</strong></p>

<p>下記手順を行ったtestnetを<code>koto-testnet.poolof.work</code>で公開しています。
上記ホストをaddnodeすれば接続できるので、自由に使ってください。<br/>
※ただし予告なくサービス停止するかもしれません。</p>

<p>使い方：</p>

<p>(1) <code>-testnet</code>オプションをつけてkotodを起動する。</p>

<blockquote><p>kotod -testnet &hellip;</p></blockquote>

<p>(2) <code>koto-testnet.poolof.work</code>をaddnodeする。</p>

<blockquote><p>koto-cli &ndash;testnet addnode koto-testnet.poolof.work add</p></blockquote>

<h2>Kotodを改造する</h2>

<h3>日時対策</h3>

<p>単純にOSの時間を2017/12/10 13:10:55(Genesis Blockのタイムスタンプ)付近に変えてもいいが、ここでは日時(等)のチェックをしているところをつぶしてしまうことで実現します。</p>

<p>チェック関数は<code>main.cpp</code>の<code>IsInitialBlockDownload()</code>なので、その先頭に<code>return false;</code>を入れてあげます。</p>

<p>main.cpp:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">bool</span> <span class="nf">IsInitialBlockDownload</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>                               <span class="c1">// &lt;=この行を挿入</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">CChainParams</span><span class="o">&amp;</span> <span class="n">chainParams</span> <span class="o">=</span> <span class="n">Params</span><span class="p">();</span>
</span><span class='line'>    <span class="n">LOCK</span><span class="p">(</span><span class="n">cs_main</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">fImporting</span> <span class="o">||</span> <span class="n">fReindex</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>dnsseed設定を変更</h3>

<p>公式にTestnetが動き出したときにプライベートTestnetが影響を与えてしまわないように、公式のdnsseed設定を消しておきます。
ついでに自サーバのホスト名(または、IPアドレス)をdnsseedとして設定しておきます。</p>

<p>chainparam.cpp:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Testnet (v3)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CTestNetParams</span> <span class="o">:</span> <span class="k">public</span> <span class="n">CMainParams</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">CTestNetParams</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">:</span>
</span><span class='line'>        <span class="n">vFixedSeeds</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="n">vSeeds</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">//vSeeds.push_back(CDNSSeedData(&quot;koto.cash&quot;, &quot;dnsseed.testnet.koto.cash&quot;)); // &lt;= 消す</span>
</span><span class='line'>        <span class="n">vSeeds</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">CDNSSeedData</span><span class="p">(</span><span class="s">&quot;koto.cash&quot;</span><span class="p">,</span> <span class="s">&quot;koto-testnet.poolof.work&quot;</span><span class="p">));</span>    <span class="c1">// &lt;= 追加</span>
</span></code></pre></td></tr></table></div></figure>


<h3>コンパイル</h3>

<p>既にビルド済みの場合は、srcディレクトリでmake kotodを実行します。</p>

<blockquote><p>cd koto<br/>
cd src<br/>
make kotod</p></blockquote>

<p>まだビルドしていない場合は、普通にビルドします。</p>

<blockquote><p>./zcutil/build.sh &ndash;disable-rust</p></blockquote>

<p>ビルドし終わったら/usr/local/binへコピーします。(自分の環境では。)</p>

<blockquote><p>sudo cp kotod /usr/local/bin</p></blockquote>

<h2>Kotodをポートを変えて2個実行する</h2>

<h3>設定</h3>

<p>1個目はデフォルトのテストネット設定を使用。</p>

<ul>
<li>~/.koto</li>
<li>ポートは18433(p2p)と18432(rpc)</li>
</ul>


<p>2個目のKotod：</p>

<ul>
<li>~/.kotosを使う</li>
<li>ポートは18443(p2p)と18442(rpc)</li>
<li>2個目のKotodが1個目に接続する。</li>
</ul>


<p>設定ファイルは以下のようにしています。</p>

<p>1個目：~/.koto/koto.conf</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">rpcuser</span><span class="o">=</span><span class="s">rpcuser</span>
</span><span class='line'><span class="na">rpcpassword</span><span class="o">=</span><span class="s">rpcpass</span>
</span><span class='line'><span class="na">rpcbind</span><span class="o">=</span><span class="s">0.0.0.0</span>
</span><span class='line'><span class="na">rpcallowip</span><span class="o">=</span><span class="s">0.0.0.0/0</span>
</span><span class='line'><span class="na">server</span><span class="o">=</span><span class="s">1</span>
</span><span class='line'><span class="na">minetolocalwallet</span><span class="o">=</span><span class="s">1</span>
</span><span class='line'><span class="na">testnet</span><span class="o">=</span><span class="s">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>2個目：~/.kotos/koto.conf</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">rpcuser</span><span class="o">=</span><span class="s">rpcuser</span>
</span><span class='line'><span class="na">rpcpassword</span><span class="o">=</span><span class="s">rpcpass</span>
</span><span class='line'><span class="na">rpcbind</span><span class="o">=</span><span class="s">0.0.0.0</span>
</span><span class='line'><span class="na">rpcallowip</span><span class="o">=</span><span class="s">0.0.0.0/0</span>
</span><span class='line'><span class="na">port</span><span class="o">=</span><span class="s">18443</span>
</span><span class='line'><span class="na">rpcport</span><span class="o">=</span><span class="s">18442</span>
</span><span class='line'><span class="na">connect</span><span class="o">=</span><span class="s">localhost</span>
</span><span class='line'><span class="na">server</span><span class="o">=</span><span class="s">1</span>
</span><span class='line'><span class="na">minetolocalwallet</span><span class="o">=</span><span class="s">1</span>
</span><span class='line'><span class="na">datadir</span><span class="o">=</span><span class="s">/home/koto/.kotos</span>
</span></code></pre></td></tr></table></div></figure>


<p>port, rpcport, connect, datadirをそれぞれ設定しています。</p>

<h3>systemd設定</h3>

<p>ユーザ「koto」で実行する前提です。上記の設定ファイルもその前提で作成しています。</p>

<p>/etc/systemd/system/kotod-testnet.service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Unit]</span>
</span><span class='line'><span class="na">Description</span><span class="o">=</span><span class="s">Bitcoin daemon</span>
</span><span class='line'><span class="na">After</span><span class="o">=</span><span class="s">network.target</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Service]</span>
</span><span class='line'><span class="na">ExecStart</span><span class="o">=</span><span class="s">/usr/local/bin/kotod -testnet -daemon -conf=/home/koto/.koto/koto.conf -pid=/home/koto/.koto/koto-testnet.pid</span>
</span><span class='line'><span class="na">User</span><span class="o">=</span><span class="s">koto</span>
</span><span class='line'><span class="na">Group</span><span class="o">=</span><span class="s">koto</span>
</span><span class='line'><span class="na">Type</span><span class="o">=</span><span class="s">forking</span>
</span><span class='line'><span class="na">PIDFile</span><span class="o">=</span><span class="s">/home/koto/.koto/koto-testnet.pid</span>
</span><span class='line'><span class="na">Restart</span><span class="o">=</span><span class="s">on-failure</span>
</span><span class='line'><span class="na">PrivateTmp</span><span class="o">=</span><span class="s">true</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Install]</span>
</span><span class='line'><span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span>
</span></code></pre></td></tr></table></div></figure>


<p>/etc/systemd/system/kotod-testnet-slave.service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Unit]</span>
</span><span class='line'><span class="na">Description</span><span class="o">=</span><span class="s">Koto cash daemon (testnet/slave)</span>
</span><span class='line'><span class="na">After</span><span class="o">=</span><span class="s">network.target</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Service]</span>
</span><span class='line'><span class="na">ExecStart</span><span class="o">=</span><span class="s">/usr/local/bin/kotod -testnet -daemon -conf=/home/koto/.kotos/koto.conf -pid=/home/koto/.kotos/koto-testnet.pid</span>
</span><span class='line'><span class="na">User</span><span class="o">=</span><span class="s">koto</span>
</span><span class='line'><span class="na">Group</span><span class="o">=</span><span class="s">koto</span>
</span><span class='line'><span class="na">Type</span><span class="o">=</span><span class="s">forking</span>
</span><span class='line'><span class="na">PIDFile</span><span class="o">=</span><span class="s">/home/koto/.kotos/koto-testnet.pid</span>
</span><span class='line'><span class="na">Restart</span><span class="o">=</span><span class="s">on-failure</span>
</span><span class='line'><span class="na">PrivateTmp</span><span class="o">=</span><span class="s">true</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Install]</span>
</span><span class='line'><span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span>
</span></code></pre></td></tr></table></div></figure>


<h3>実行</h3>

<p>実行します。</p>

<blockquote><p>sudo systemctl daemon-reload<br/>
sudo systemctl start kotod-testnet<br/>
sudo systemctl start kotod-testnet-slave</p></blockquote>

<p><code>koto-cli --testnet getinfo</code>を実行してconnectionsが1になっていれば成功しているはずです。</p>

<h2>マイニングしてみる</h2>

<p>cpuminer-yescryptをコンパイルしましょう。</p>

<blockquote><p> minerd &ndash;algo=yescrypt &ndash;userpass=rpcuser:rpcpass -o 127.0.0.1:18432</p></blockquote>

<p>これで猛烈な勢いでマイニングが進むはず。</p>

<h2>その後の作業</h2>

<h3>日時対策を元に戻す</h3>

<p>1度マイニングしてしまえば日時対策は不要です。</p>

<p><code>main.cpp</code>の修正の影響がどこまであるかわからないので、<code>main.cpp</code>を元に戻したkotodを再コンパイルし、サービスを再起動します。</p>

<h3>ToDo</h3>

<ul>
<li>testnet用のinsightを立てる</li>
<li>testnet用の蛇口(Fauset)を作る</li>
<li>dnsseed(DNSサーバ)を立てる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressインストール方法]]></title>
    <link href="http://yoshuki43.github.io/blog/2018/02/09/octpass/"/>
    <updated>2018-02-09T14:13:16+09:00</updated>
    <id>http://yoshuki43.github.io/blog/2018/02/09/octpass</id>
    <content type="html"><![CDATA[<h2>Octopressとは</h2>

<p>OctopressはJekyllを使ったブログ構築用フレームワーク。
GitHub Pagesと連携できる。</p>

<p>Octopress<br/>
<a href="http://octopress.org/">http://octopress.org/</a></p>

<p>インストール<br/>
<a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></p>

<p>テーマ一覧<br/>
<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a></p>

<h2>インストール</h2>

<h3>準備</h3>

<p>ruby環境の構築</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install -y ruby ruby-dev git
</span><span class='line'>git clone https://github.com/rbenv/rbenv.git ~/.rbenv
</span><span class='line'>cd ~/.rbenv && src/configure && make -C src
</span><span class='line'>git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build</span></code></pre></td></tr></table></div></figure>


<p>以下の行を「~/.bash_profile」に追記</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH="$HOME/.rbenv/bin:$PATH"
</span><span class='line'>eval "$(rbenv init -)"</span></code></pre></td></tr></table></div></figure>


<p>反映</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<p>ruby環境を作成(バージョンは<a href="https://pages.github.com/versions/">ここ</a>のrubyと同じにするとよい。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> rbenv install 2.4.2
</span><span class='line'> rbenv global 2.4.2
</span><span class='line'> gem install bundler
</span><span class='line'> #rakeは特定バージョンが必要なのでインストールしないこと！rake</span></code></pre></td></tr></table></div></figure>


<p>node.jsをインストール(ExecJSで必要になるため。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -
</span><span class='line'>sudo apt-get install -y nodejs</span></code></pre></td></tr></table></div></figure>


<h3>Octopressインストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>rbenv rehash
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h3>テーマ変更</h3>

<p>このへんからよさげなテーマを選ぶ。</p>

<p><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a></p>

<p>GitHubをDeploy先として登録</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>「ユーザ名.github.io」というリポジトリをGitHubに作っておく。
</span><span class='line'>
</span><span class='line'>$ rake setup_github_pages
</span><span class='line'>    :
</span><span class='line'>Repository url: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io
</span><span class='line'>    :
</span><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<p>「<a href="">https://&lt;username&gt;.github.io/</a>」にアクセスしてみる。</p>

<h3>設定</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi _config.yml</span></code></pre></td></tr></table></div></figure>


<p>ブログ以外のファイルも入れたい?<br/>
-> sourceフォルダにGitHub Pagesにアップロードしたいファイルを入れる。</p>

<h2>ブログを書く</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post['1st post']
</span><span class='line'>mkdir -p source/_posts
</span><span class='line'>Creating new post: source/_posts/2018-02-09-1st-post.markdown</span></code></pre></td></tr></table></div></figure>


<p>ファイルが作成されるので、編集する。</p>

<p>マークダウンヘルプ<br/>
<a href="https://github.com/higuma/markdown_cheat_sheet">https://github.com/higuma/markdown_cheat_sheet</a>
<a href="https://help.github.com/articles/basic-writing-and-formatting-syntax">https://help.github.com/articles/basic-writing-and-formatting-syntax</a></p>

<p>VSCodeを使用していれば、マークダウンを開いた画面の右上にある「プレビューを横に表示」ボタンでプレビュー画面を表示できる。（Ctrk+K vでもOK?)</p>

<p>追記:<br/>
VSCodeの拡張機能「Markdown Preview Github Styling」をインストールすれば、よりGitHubに近い形でプレビューを表示できる。</p>

<p>書き終わったら先ほどと同じようにgenerate->deployする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotoイメージで遊んでみた]]></title>
    <link href="http://yoshuki43.github.io/blog/2018/02/09/1st-post/"/>
    <updated>2018-02-09T13:42:34+09:00</updated>
    <id>http://yoshuki43.github.io/blog/2018/02/09/1st-post</id>
    <content type="html"><![CDATA[<p>テストテストテスト。</p>

<p>このブログは<a href="http://octopress.org/">Octopress</a>を使用して作成しています。</p>

<p>以下はテスト記事。</p>

<h2>Kotoイメージで遊んでみた</h2>

<ul>
<li><a href="https://yoshuki43.github.io/koto/koto.html">回してみた</a></li>
<li><a href="https://yoshuki43.github.io/koto/phy.html">落としてみた</a></li>
</ul>


<p>Javascript+WebGLな3D Engineの「<a href="https://threejs.org/">Three.js</a>」と物理エンジン「<a href="https://github.com/lo-th/Oimo.js/">oimo.js</a>」を使用しています。</p>
]]></content>
  </entry>
  
</feed>
